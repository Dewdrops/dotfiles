" Modeline and Notes {{{
" vim: sw=4 ts=4 sts=4 et tw=80 foldmarker={{{,}}} foldlevel=0 foldmethod=marker
"
"   This is the tiny version of my .vimrc. It doesn't depend on any plugin.
" }}}

" Environment {{{

    set nocompatible        " Must be first line

    redir => output
    silent execute 'scriptnames'
    redir END
    let g:dewdrops_invoked_as_dotvimrc = len(split(output, '\n')) == 1 ? 1 : 0

    " Windows Compatible {{{
    " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
    " across (heterogeneous) systems easier
    if has('win32') || has('win64')
        set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

        if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
        endif
    endif
    " }}}

" }}}

" General {{{

    if g:dewdrops_invoked_as_dotvimrc
        filetype plugin indent on   " Automatically detect file types
        syntax on                   " Syntax highlighting
    endif

    set background=dark         " Assume a dark background
    set mouse=a                 " Automatically enable mouse usage
    set mousehide               " Hide the mouse cursor while typing
    scriptencoding utf-8

    if has ('x') && has ('gui') " On Linux use + register for copy-paste
        set clipboard=unnamedplus
    elseif has ('gui')          " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif

    " automatically switch to the current file directory when a new buffer is opened
    au BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif

    set autoread                            " reload automatically when file is changed outside
    set shortmess+=filmnrxoOtT              " Abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,cursor,unix,slash " Better Unix / Windows compatibility
    set sessionoptions=blank,buffers,curdir,folds,slash,tabpages,winsize,unix
    set virtualedit=onemore                 " Allow for cursor beyond last character
    set history=1000                        " Store a ton of history (default is 20)
    set hidden                              " Allow buffer switching without saving
    set ttimeoutlen=50                      " dimish the pause when leaving insert mode
    if v:version >= 703
        set cryptmethod=blowfish            " for more security (zip is too weak)
    endif

    " Omnicomplete
    au Filetype *
                \ if &omnifunc == "" |
                \ setlocal omnifunc=syntaxcomplete#Complete |
                \ endif
    au FileType css setlocal omnifunc=csscomplete#CompleteCSS
    au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    au FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    au FileType python setlocal omnifunc=pythoncomplete#Complete
    au FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    if has("ruby")
        au FileType ruby,eruby setlocal omnifunc=rubycomplete#Complete
    endif
    set completeopt=menu

    " language specific settings
    autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading    = 1
    autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
    autocmd FileType ruby,eruby let g:rubycomplete_rails             = 1

    hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
    hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
    hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE
    " Automatically open and close the popup menu or preview window
    au CursorMovedI,InsertLeave * if pumvisible() == 0 | silent! pclose | endif

    " spell check when writing commit logs
    au filetype svn,*commit* setlocal spell

    " ignore compiled files
    set wildignore=*.o,*.obj,*.pyc,*.elc,*~
    if has("win16") || has("win32")
        set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
    else
        set wildignore+=.git\*,.hg\*,.svn\*
    endif

    " Autosave & Load Views.
    autocmd BufWritePost,WinLeave,BufWinLeave ?* if MakeViewCheck() | mkview | endif
    autocmd BufWinEnter ?* if MakeViewCheck() | silent! loadview | endif

    " Setting up the directories
    set backup
    if has('persistent_undo')
        set undofile
        set undolevels=1000         " Maximum number of changes that can be undone
        set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
    endif

" }}}

" Vim UI {{{

    colo ron

    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode

    set lazyredraw                  " Don't redraw while executing macros

    highlight clear SignColumn      " SignColumn should match background for
                                    " things like vim-gitgutter

    if has('cmdline_info')
        set ruler                   " Show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
    endif

    if has('statusline')
        set laststatus=2

        " Broken down into easily includeable segments
        set statusline=%<%f\                     " Filename
        set statusline+=%w%h%m%r                 " Options
        set statusline+=\ [%{&ff}/%Y]            " Filetype
        set statusline+=\ [%{getcwd()}]          " Current directory
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    endif

    set backspace=indent,eol,start     " Backspace for dummies
    set linespace=0                    " No extra spaces between rows
    set nu                             " Line numbers on
    if v:version >= 703
        " relative line number for fast motion
        au BufEnter * if &nu | set relativenumber | endif
    endif
    set showmatch                      " Show matching brackets/parenthesis
    set incsearch                      " Find as you type search
    set hlsearch                       " Highlight search terms
    set cursorline                     " Highlight current line
    set winminheight=0                 " Windows can be 0 line high
    set ignorecase                     " Case insensitive search
    set smartcase                      " Case sensitive when uc present
    set wildmenu                       " Show list instead of just completing
    set wildmode=list:longest,full     " Command <Tab> completion, list matches, then longest common part, then all
    set whichwrap=b,s,h,l,<,>,[,]      " Backspace and cursor keys wrap too
    set scrolljump=1                   " Lines to scroll when cursor leaves screen
    set scrolloff=3                    " Minimum lines to keep above and below cursor
    set foldenable                     " Auto fold code
    set list
    set switchbuf=useopen,usetab
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

" }}}

" Formatting {{{

    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent

    set smartindent                 " smart autoindent for C programs
    set cindent
    set cinoptions={0,t0,p2s,(03s,>1s,=1s,:1s

    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

    set foldmethod=syntax
    set foldlevel=99

    " Remove trailing whitespaces and ^M chars
    au FileType c,cpp,java,go,php,javascript,python,xml,yml au BufWritePre <buffer> call StripTrailingWhitespace()
    au FileType python,haskell,coffee,html,xhtml setlocal fdm=indent
    au FileType ruby,html,xhtml setlocal softtabstop=2 shiftwidth=2 ts=2

" }}}

" Key (re)Mappings {{{

    let mapleader = ','

    " Easier moving in tabs and windows
    map <C-J> <C-W>j
    map <C-K> <C-W>k
    map <C-L> <C-W>l
    map <C-H> <C-W>h

    " Wrapped lines goes down/up to next row, rather than next line in file
    nnoremap j gj
    nnoremap k gk
    nnoremap gj j
    nnoremap gk k

    " use <f7> to insert digraph
    inoremap <f7> <c-k>

    " use <tab> to circle in pop up menu
    inoremap <expr><tab> pumvisible() ? "\<C-n>" : "\<tab>"

    "map <S-H> gT
    "map <S-L> gt

    "use q as an unified way to exit various visual mode
    vnoremap q <esc>

    " Stupid shift key fixes
    command! -bang -nargs=* -complete=file E e<bang> <args>
    command! -bang -nargs=* -complete=file W w<bang> <args>
    command! -bang -nargs=* -complete=file Wq wq<bang> <args>
    command! -bang -nargs=* -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>

    cmap Tabe tabe
    nnoremap <leader>te :tabedit<space>
    nnoremap <leader>tc :tabclose<cr>
    nnoremap <leader>tf :tabfirst<cr>
    nnoremap <leader>tl :tablast<cr>

    " Yank from the cursor to the end of the line, to be consistent with C and D.
    nnoremap Y y$

    " swap 0 and ^ in normal mode
    noremap 0 ^
    noremap ^ 0

    " folding
    nmap <leader>f0 :set foldlevel=0<cr>
    nmap <leader>f1 :set foldlevel=1<cr>
    nmap <leader>f2 :set foldlevel=2<cr>
    nmap <leader>f3 :set foldlevel=3<cr>
    nmap <leader>f4 :set foldlevel=4<cr>
    nmap <leader>f5 :set foldlevel=5<cr>
    nmap <leader>f6 :set foldlevel=6<cr>
    nmap <leader>f7 :set foldlevel=7<cr>
    nmap <leader>f8 :set foldlevel=8<cr>
    nmap <leader>f9 :set foldlevel=9<cr>
    nnoremap <leader>zd :set fdm=diff<cr>
    nnoremap <leader>za :set fdm=manual<cr>
    nnoremap <leader>zs :set fdm=syntax<cr>
    nnoremap <leader>zm :set fdm=marker<cr>
    nnoremap <leader>zi :set fdm=indent<cr>
    nnoremap <leader>ze :set fdm=expr<cr>

    nmap <leader>sw :call StripTrailingWhitespace()<cr>

    " insert timestamp
    nmap <leader>ts :r! date "+\%Y-\%m-\%d \%H:\%M:\%S"<cr>

    " Toggle search highlighting
    nmap <silent> <leader>nh :nohlsearch<cr>
    nmap <silent> <leader>/ :nohlsearch<cr>

    "Remove the Windows ^M
    noremap <leader>tr :%s/\r//g<CR>

    " Shortcuts in command line
    " Change Working Directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " Some helpers to edit mode
    cnoremap %% <C-R>=expand('%:p:h').'/'<cr>
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%

    " Fast edit .vimrc
    map <leader>V :e ~/.vimrc<cr>
    map <leader>T :e ~/.vimrc_tiny<cr>

    " Adjust viewports to the same size
    map <Leader>= <C-w>=
    map <Leader>x0 <C-w>c
    map <Leader>x1 <C-w>o

    " Map <Leader>ff to display all lines with keyword under cursor
    " and ask which one to jump to
    nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<cr>

    " Easier horizontal scrolling
    map zl zL
    map zh zH

    " show foldlevel in fold commands
    nnoremap zr zr:echo &foldlevel<cr>
    nnoremap zm zm:echo &foldlevel<cr>
    nnoremap zR zR:echo &foldlevel<cr>
    nnoremap zM zM:echo &foldlevel<cr>
    nnoremap za za:echo &foldlevel<cr>

    " use gy and gp to work with system's clipboard
    nnoremap gy "+y
    nnoremap gp "+p
    vnoremap gy "+y
    vnoremap gp "+p

    " emacs-like motion command in insert mode
    inoremap <c-f> <right>
    inoremap <c-b> <left>
    inoremap <c-d> <del>

    " quickfix / location list
    nnoremap <leader>cc :cc<cr>
    nnoremap <leader>cp :cp<cr>
    nnoremap <leader>cn :cn<cr>
    nnoremap <leader>cl :cl<cr>
    nnoremap <leader>cw :cw<cr>
    nnoremap <leader>ll :ll<cr>
    nnoremap <leader>lp :lp<cr>
    nnoremap <leader>ln :lne<cr>
    nnoremap <leader>li :lli<cr>
    nnoremap <leader>lw :lw<cr>

    " misc
    nnoremap <leader>bd :Bclose<cr>
    nnoremap <leader>q :q<cr>
    nnoremap <leader>wq :wq<cr>
    nnoremap <leader>wa :wa<cr>
    nnoremap <leader>wn :wn<cr>
    nnoremap <leader>wp :wp<cr>
    nnoremap <leader>wr :w<cr>
    nnoremap <leader>xa :xa<cr>
    nnoremap <leader>bp :bp<cr>
    nnoremap <leader>bn :bn<cr>
    nnoremap <leader>lv :lv /<c-r>=expand("<cword>")<cr>/ %<cr>:lw<cr>
    nnoremap <leader>mk :make<cr>
    nnoremap <leader>sp :sp<cr>
    nnoremap <leader>vs :vs<cr>
    nnoremap <leader>st :setlocal spell!<cr>
    nnoremap <leader>; mMA;<esc>`M
    nnoremap <f5> :%TOhtml<cr>

    " unimpaired-like binding
    if g:dewdrops_invoked_as_dotvimrc
        nnoremap [b :bp<cr>
        nnoremap ]b :bn<cr>
        nnoremap [s i<space><esc>l
        nnoremap ]s a<space><esc>h
        nnoremap [w i<space><right><space><esc>h
        nnoremap [<space> mzO<esc>0d$`z
        nnoremap ]<space> mzo<esc>0d$`z

        " move text
        nmap [e mz:m-2<cr>`z
        nmap ]e mz:m+<cr>`z
        vmap [e :m'<-2<cr>`>my`<mzgv`yo`z
        vmap ]e :m'>+<cr>`<my`>mzgv`yo`z
    endif

" }}}

" GUI Settings {{{

    " GVIM- (here instead of .gvimrc)
    if has('gui_running')
        set guioptions-=T           " Remove the toolbar
        set guioptions-=m           " Remove the menubar
        set guioptions-=r           " Remove the scrollbar
        set lines=40                " 40 lines of text instead of 24
        if has("gui_gtk2")
            set guifont=Andale\ Mono\ Regular\ 16,Menlo\ Regular\ 15,Consolas\ Regular\ 16,Courier\ New\ Regular\ 18
        elseif has("gui_mac")
            set guifont=Andale\ Mono\ Regular:h16,Menlo\ Regular:h15,Consolas\ Regular:h16,Courier\ New\ Regular:h18
        elseif has("gui_win32")
            set guifont=Andale_Mono:h10,Menlo:h10,Consolas:h10,Courier_New:h10
        endif
        if has('gui_macvim')
            set transparency=5      " Make the window slightly transparent
        endif
    else
        if &term == 'xterm' || &term == 'screen'
            set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
        endif
    endif

" }}}

" Functions {{{

    " Initialize directories {{{
    function! InitializeDirectories()
        let parent = $HOME
        let prefix = 'vim'
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir',
                    \ 'swap': 'directory' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        " Specify the directory in which to place the vimbackup,
        " vimviews, vimundo, and vimswap files/directories
        let common_dir = parent . '/.' . prefix

        for [dirname, settingname] in items(dir_list)
            let directory = common_dir . dirname . '/'
            if exists("*mkdir")
                if !isdirectory(directory)
                    call mkdir(directory)
                endif
            endif
            if !isdirectory(directory)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . directory
            else
                let directory = substitute(directory, " ", "\\\\ ", "g")
                exec "set " . settingname . "=" . directory
            endif
        endfor
    endfunction
    " }}}

    " Strip whitespace {{{
    function! StripTrailingWhitespace()
        " Preparation: save last search, and cursor position.
        let _s = @/
        let l  = line(".")
        let c  = col(".")
        " do the business:
        %s/\s\+$//e
        " clean up: restore previous search history, and cursor position
        let @/ = _s
        call cursor(l, c)
    endfunction
    " }}}

    " Don't close window, when deleting a buffer {{{
    command! Bclose call <SID>BufcloseCloseIt()
    function! <SID>BufcloseCloseIt()
        let l:currentBufNum = bufnr("%")
        let l:alternateBufNum = bufnr("#")
        if buflisted(l:alternateBufNum)
            buffer #
        else
            bnext
        endif
        if bufnr("%") == l:currentBufNum
            new
        endif
        if buflisted(l:currentBufNum)
            execute("bdelete! ".l:currentBufNum)
        endif
    endfunction
    " }}}

    " Check whether to load/restore view {{{
    function! MakeViewCheck()
        if has('quickfix') && &buftype =~ 'nofile' | return 0 | endif
        if expand('%') =~ '\[.*\]' | return 0 | endif
        if empty(glob(expand('%:p'))) | return 0 | endif
        if &modifiable == 0 | return 0 | endif
        if len($TEMP) && expand('%:p:h') == $TEMP | return 0 | endif
        if len($TMP) && expand('%:p:h') == $TMP | return 0 | endif
        return 1
    endfunction
    " }}}

" }}}

" Finish local initializations {{{
    call InitializeDirectories()
" }}}
